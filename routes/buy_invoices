const express = require("express");
const router = express.Router();
const { pool, sql } = require("../config/db");

// ✅ GET all buy invoices
router.get("/", async (req, res) => {
  try {
    const result = await pool.request().query("SELECT * FROM purchases_list");
    res.json(result.recordset);
  } catch (err) {
    console.error("❌ Error fetching buy invoices:", err);
    res.status(500).json({ error: "Database fetch failed" });
  }
});


// صافي المشتريات

router.get("/net-purchases", async (req, res) => {
  try {
    const { date_from, date_to, type } = req.query;

    let dateGroup;
    switch (type) {
      case "0": // يومي
        dateGroup = "FORMAT(pur.invoice_date, 'yyyy-MM-dd')";
        break;
      case "1": // شهري
        dateGroup = "FORMAT(pur.invoice_date, 'yyyy-MM')";
        break;
      case "2": // سنوي
        dateGroup = "FORMAT(pur.invoice_date, 'yyyy')";
        break;
      default:
        return res.status(400).json({ error: "Invalid type. Use 0, 1, or 2" });
    }

    const result = await pool.request()
      .input("date_from", date_from)
      .input("date_to", date_to)
      .query(`
        SELECT 
          ${dateGroup} AS period,
          COUNT(pur.id) AS invoice_count,
          SUM(pur.total_invoice) AS total_invoice,
          SUM(pur.fatora_tax) AS total_tax,
          SUM(pur.fatora_desc) AS total_discount,
          SUM(pur.fatora_paid) AS total_paid,
          SUM(pur.fatora_Residual) AS total_residual
        FROM invoice_add pur
        WHERE pur.invoice_date BETWEEN @date_from AND @date_to
        GROUP BY ${dateGroup}
        ORDER BY ${dateGroup};
      `);

    res.json(result.recordset);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

module.exports = router;